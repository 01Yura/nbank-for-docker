name: Docker Push Pipeline

on:
  push:
    branches: [main, master]
    paths:
      - "src/**"
  pull_request:
    branches: [main, master]
    paths:
      - "src/**"
  workflow_dispatch:

env:
  REGISTRY: docker.io
  IMAGE_NAME: 01yura/nbank-tests

jobs:
  build-and-test:
    name: Build, Test and Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check Docker Hub secrets
        run: |
          echo "=== Docker Hub Secrets Check ==="
          echo "DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}"
          echo "DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}"
          echo "REGISTRY: ${{ env.REGISTRY }}"
          echo "IMAGE_NAME: ${{ env.IMAGE_NAME }}"
          if [ -z "${{ secrets.DOCKERHUB_USERNAME }}" ]; then
            echo "‚ùå ERROR: DOCKERHUB_USERNAME is empty or not set"
            exit 1
          fi
          if [ -z "${{ secrets.DOCKERHUB_TOKEN }}" ]; then
            echo "‚ùå ERROR: DOCKERHUB_TOKEN is empty or not set"
            exit 1
          fi
          echo "‚úÖ Docker Hub secrets are configured"

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "21"

      - name: Cache Maven repository
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Get commit hash
        id: commit_hash
        run: echo "hash=${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Detect runner IP
        id: runner_ip
        run: |
          ip=$(hostname -I | awk '{print $1}')
          echo "Runner IP is: $ip"
          echo "ip=$ip" >> $GITHUB_OUTPUT

      - name: Set HOST_PATH for docker-compose
        run: |
          PROJECT_PATH=$(pwd)
          echo "Detected project path: $PROJECT_PATH"
          echo "HOST_PATH=$PROJECT_PATH" > infra/.env
          cat infra/.env

      - name: Set up services
        run: cd infra && bash start-docker-compose.sh && cd ..

      - name: Build project with Maven
        run: |
          echo "Building project..."
          ./mvnw clean compile -q
          echo "Build completed successfully"
        env:
          APIBASEURL: http://localhost:4111
          UIBASEURL: http://${{ steps.runner_ip.outputs.ip }}:80
          UIREMOTE: http://localhost:4444/wd/hub

      - name: Run Checkstyle
        run: |
          echo "Running Checkstyle..."
          ./mvnw checkstyle:check -q
          echo "Checkstyle completed successfully"
        env:
          APIBASEURL: http://localhost:4111
          UIBASEURL: http://${{ steps.runner_ip.outputs.ip }}:80
          UIREMOTE: http://localhost:4444/wd/hub

      - name: Run tests
        run: |
          echo "Running tests..."
          ./mvnw test -q
          echo "Tests completed successfully"
        env:
          APIBASEURL: http://localhost:4111
          UIBASEURL: http://${{ steps.runner_ip.outputs.ip }}:80
          UIREMOTE: http://localhost:4444/wd/hub

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ steps.commit_hash.outputs.hash }}
            type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: target/surefire-reports/
          retention-days: 30

      - name: Upload Checkstyle results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: checkstyle-results
          path: target/checkstyle-result.xml
          retention-days: 30

      - name: Notify Telegram on Docker push success
        if: success()
        run: |
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d parse_mode=Markdown \
            -d text="‚úÖ *Docker image pushed successfully!*

          üì¶ *Repository:* [${{ github.repository }}](https://github.com/${{ github.repository }})
          üåø *Branch:* \`${{ github.ref_name }}\`
          üîÅ *Commit:* [\`${{ github.sha }}\`](https://github.com/${{ github.repository }}/commit/${{ github.sha }})
          üë§ *Author:* \`${{ github.actor }}\`
    
          üê≥ *Docker Hub:* [${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}](https://hub.docker.com/r/${{ env.IMAGE_NAME }})
          üè∑Ô∏è *Tags:*
          \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.commit_hash.outputs.hash }}\`

          üîó *Workflow Run:* [View on GitHub](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"

      - name: Notify Telegram on failure
        if: failure()
        run: |
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d parse_mode=Markdown \
            -d text="‚ùå *Docker pipeline failed!*
  
          üì¶ *Repository:* [${{ github.repository }}](https://github.com/${{ github.repository }})
          üåø *Branch:* `${{ github.ref_name }}`
          üîÅ *Commit:* [`${{ github.sha }}`](https://github.com/${{ github.repository }}/commit/${{ github.sha }})
          üë§ *Author:* `${{ github.actor }}`
          
          üö® *Check the logs here:* [GitHub Actions Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
